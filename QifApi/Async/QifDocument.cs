//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using Keg247.Qif.Parsers;
using Keg247.Qif.Transactions;
using Keg247.Qif.Transactions.Fields;
using Keg247.Qif.Writers;

namespace Keg247.Qif
{
    using System.Threading.Tasks;
    public partial class QifDocument
    {

        /// <summary>
        /// Saves the QIF document to the <see cref="Stream"/>.
        /// </summary>
        public async Task SaveAsync(Stream stream)
        {
            using (var writer = new StreamWriter(stream))
            {
                await (SaveAsync(writer)).ConfigureAwait(true);
            }
        }

        /// <summary>
        /// Exports the QIF document to the <see cref="TextWriter"/>.
        /// </summary>
        public async Task SaveAsync(TextWriter writer)
        {
            await (AccountListWriter.WriteAsync(writer, AccountListTransactions)).ConfigureAwait(true);
            await (BasicTransactionWriter.WriteAsync(writer, Headers.Asset, AssetTransactions)).ConfigureAwait(true);
            await (BasicTransactionWriter.WriteAsync(writer, Headers.Bank, BankTransactions)).ConfigureAwait(true);
            await (BasicTransactionWriter.WriteAsync(writer, Headers.Cash, CashTransactions)).ConfigureAwait(true);
            await (BasicTransactionWriter.WriteAsync(writer, Headers.CreditCard, CreditCardTransactions)).ConfigureAwait(true);
            await (BasicTransactionWriter.WriteAsync(writer, Headers.Liability, LiabilityTransactions)).ConfigureAwait(true);
            await (CategoryListWriter.WriteAsync(writer, CategoryListTransactions)).ConfigureAwait(true);
            await (ClassListWriter.WriteAsync(writer, ClassListTransactions)).ConfigureAwait(true);
            await (InvestmentWriter.WriteAsync(writer, InvestmentTransactions)).ConfigureAwait(true);
            await (MemorizedTransactionListWriter.WriteAsync(writer, MemorizedTransactionListTransactions)).ConfigureAwait(true);
        }

        /// <summary>
        /// Parses a QIF document from the specified <see cref="String"/>.
        /// </summary>
        /// <param name="text">The text representation of QIF file to parse.</param>
        /// <returns>A QifDocument object of transactions imported.</returns>
        public static async Task<QifDocument> ParseAsync(string text)
        {
            using (var reader = new StringReader(text))
            {
                return await (LoadAsync(reader)).ConfigureAwait(true);
            }
        }

        /// <summary>
        /// Loads a QIF document from the specified <see cref="Stream"/>
        /// </summary>
        /// <param name="stream">The stream pointing to an underlying QIF file to load.</param>
        /// <returns>A QifDocument object of transactions imported.</returns>
        public static async Task<QifDocument> LoadAsync(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return await (LoadAsync(reader)).ConfigureAwait(true);
            }
        }

        /// <summary>
        /// Loads a QIF document from the specified <see cref="TextReader"/>
        /// </summary>
        /// <param name="reader">The text reader pointing to an underlying QIF file to load.</param>
        /// <returns>A QifDocument object of transactions imported.</returns>
        public static async Task<QifDocument> LoadAsync(TextReader reader)
        {
            var result = new QifDocument();

            string line;
            IParser parser = null;
            while ((line = await (reader.ReadLineAsync()).ConfigureAwait(true)) != null)
            {
                line = line.Trim();
                switch (line[0])
                {
                    case InformationFields.TransactionType:
                        parser = CreateParser(line);
                        break;
                    case InformationFields.EndOfEntry:
                        Debug.Assert(parser != null, "parser != null");
                        parser.Yield(result);
                        break;
                    default:
                        Debug.Assert(parser != null, "parser != null");
                        parser.ParseLine(line);
                        break;
                }
            }

            return result;
        }
    }
}
